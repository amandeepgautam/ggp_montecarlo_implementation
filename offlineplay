#!/usr/bin/env python

import sys
from ggp.player import *
from ggp.sim import CachedSimulator
from ggp.gd import GameDescription

# number of matches to play in a row before quitting
NUM_MATCHES = 1

def main():
    gd = GameDescription(sys.argv[1])
    sim = CachedSimulator(gd)
    players = [None] * gd.numRoles()

    # Set first player's policy
    # players[0] = RandomPlayer(0)
    #players[0] = AlphaBetaPlayer(gd, sim, 0)
    players[0] = MonteCarloPlayer(gd, sim, 0)

    # Make remaining players (if any) random
    for i in xrange(1, gd.numRoles()):
        players[i] = RandomPlayer(i)

    simulationTime = 3600
    print("Simulation time:" + str(simulationTime) + " secs")
    for i in xrange(0, gd.numRoles()):
        players[i].run_simulation(gd.initialState, simulationTime)

    print("Simulations Complete.")

    num_matches = 0
    p1_goals = 0
    for i in xrange(NUM_MATCHES):
        print "Match #%d" % (i+1)
        try:
            state = gd.initialState
            while not sim.isTerminal(state):
                lm = sim.computeLegalMoves(state)
                moves = [p.act(state, lm) for p in players]
                print "  Moves:", [str(gd.moveTerm(x)) for x in moves]
                state = sim.computeNextState(state, moves)
            goals = sim.computeGoals(state)
            for p in players:
                p.processReward(goals)
            print "  Goals: %s\n" % goals
            p1_goals += goals[0]
            num_matches += 1
            for j in xrange(0, gd.numRoles()):
                print("Printing stats for player: " + str(j))
                players[j].printStats()
        except KeyboardInterrupt:
            print '^C pressed. Shutting down.\n'
            break
    print 'Completed %d match%s' % (num_matches, '' if num_matches==1 else 'es')
    print 'Player #1 Average: %.2f' % (float(p1_goals) / num_matches)
     
if __name__ == '__main__':
    main()
        
